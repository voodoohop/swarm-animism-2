"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSmoothingFunctor = getSmoothingFunctor;
exports.default = createBandpassNoteTracker;

var _ramda = require("ramda");

var _utils = require("../utils");

const SMOOTHING = 0.94;

function getSmoothingFunctor(smoothing = 0.9, startValue = null) {
  let smoothedValue = startValue;
  return newValue => {
    if (!isFinite(newValue) || isNaN(newValue)) {
      return smoothedValue;
    }

    if (smoothedValue === null) {
      smoothedValue = newValue;
    } else {
      smoothedValue = smoothing * smoothedValue + (1 - smoothing) * newValue;
    }

    return smoothedValue;
  };
}

function createBandpassNoteTracker(midiNotes, inputNode) {
  const Tone = require('tone');

  const filterMeters = midiNotes.map(key => {
    const filter = new Tone.Filter({
      frequency: (0, _utils.midiToFrequency)(key),
      type: 'bandpass',
      rolloff: -48,
      Q: 20,
      gain: 0
    });
    const meter = new Tone.Meter();
    inputNode.connect(filter);
    filter.connect(meter);
    return meter;
  }).map(meter => {
    const smoother = getSmoothingFunctor(SMOOTHING);
    return () => smoother(meter.getValue());
  });
  const overallInputMeter = new Tone.Meter();
  const inputMeterSmoother = getSmoothingFunctor(SMOOTHING);

  const smoothedOverallInputMeter = () => {
    return inputMeterSmoother(overallInputMeter.getValue());
  };

  inputNode.connect(overallInputMeter);
  let previousChordTriggered = false; // const smooth = (previousValue, value, smoothing = 0.9) => previousValue * smoothing + (1-smoothing) * value

  function updateFunction() {
    const filterMeterValues = filterMeters.map(meter => meter());
    const overallInputLevel = smoothedOverallInputMeter();

    if (overallInputLevel === null) {
      return false;
    }

    const normalizedFilterMeterValues = filterMeterValues.map(level => {
      return level - overallInputLevel;
    }); // console.log(normalizedFilterMeterValues, overallInputLevel)

    const chordTriggered = (0, _ramda.all)(level => level > -20, normalizedFilterMeterValues) && overallInputLevel > -10;
    const newChordTriggered = !previousChordTriggered && chordTriggered;
    previousChordTriggered = chordTriggered;
    return newChordTriggered;
  }

  return updateFunction;
}