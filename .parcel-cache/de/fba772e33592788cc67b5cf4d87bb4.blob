"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const UPDATE_RATE = 10;
const HP_FREQUENCY = 300;
const LP_FREQUENCY = 4000;

class Audio {
  setup(useMic) {
    const Tone = require('tone');

    this.agents = []; // Start our runtime

    this.startTime = Date.now(); // this.analyser = new Tone.Waveform(256)

    this.gain = new Tone.Volume(); // Create audio nodes

    if (useMic) {
      console.log("Getting mic");
      this.mic = new Tone.UserMedia();
      console.log("Got mic"); // Make the frequency band a little bit more narrow

      const highpass = new Tone.Filter({
        frequency: HP_FREQUENCY,
        type: 'highpass',
        rolloff: -12,
        Q: 0.5
      });
      const lowpass = new Tone.Filter({
        frequency: LP_FREQUENCY,
        type: 'lowpass',
        rolloff: -12,
        Q: 0.5
      }); // Use gain to control volume of microphone

      this.mic.connect(highpass);
      highpass.connect(lowpass);
      lowpass.connect(this.gain); // this.gain.connect(this.analyser)
      // Listen ...

      this.mic.open();
      console.log("Opened mic!", this.gain);
    } // Start a frequent check by calling the agents update function


    this.update();
    return true;
  }

  close() {
    this.mic.close();
  }

  addAgents(addedAgents) {
    addedAgents.forEach(newAgent => {
      this.agents.push(newAgent);
      newAgent.start();
    });
  }

  removeAgents(removedAgents) {
    const agentNames = removedAgents.map(agent => agent.name);
    this.agents = this.agents.reduce((acc, existingAgent) => {
      if (agentNames.includes(existingAgent.name)) {
        existingAgent.stop();
      } else {
        acc.push(existingAgent);
      }

      return acc;
    }, []);
  }

  update() {
    setTimeout(() => {
      // console.log("Update");
      if (!this.agents) {
        this.update();
        return;
      } // const values = this.analyser.getValue()


      this.agents.forEach(agent => {
        agent.update();
      });
      this.update();
    }, UPDATE_RATE);
  }

}

exports.default = Audio;