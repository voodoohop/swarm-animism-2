"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _aWeighting = require("a-weighting");

var _utils = require("../utils");

var _tone = _interopRequireWildcard(require("tone"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// import bandpassChordDetector from '../behaviours/bandpassPolyTracker'
const defaultOptions = {
  filterQ: 0.75,
  filterRange: 7,
  filterRolloff: -24,
  minInitialNote: 60,
  maxInitialNote: 82,
  minLFOFrequency: 0.1,
  maxLFOFrequency: 0.75,
  minVelocity: 0.01,
  maxVelocity: 0.05,
  velocityRange: 1,
  minVolume: 0.25,
  maxVolume: 0.5,
  triggerChord: [60, 67]
};

class FlockingAgent {
  constructor(options = {}, visuals, gainNode) {
    this.converter = new _tone.default.Frequency();
    this.visuals = visuals;
    this.options = Object.assign({}, defaultOptions, options); // Synthesized sound of our agent (output)

    this.synth = new _tone.default.Synth({
      oscillator: {
        type: 'sine'
      },
      envelope: {
        attack: 0.005,
        decay: 0.1,
        sustain: 1,
        release: 1
      }
    });
    this.synthGainNode = new _tone.default.Gain();
    this.synthGainNode.toMaster();
    this.synth.connect(this.synthGainNode); // Filters to analyse the signal at two poles around the center

    this.filterLeft = new _tone.default.Filter({
      frequency: 440,
      type: 'bandpass',
      rolloff: this.options.filterRolloff,
      Q: this.options.filterQ,
      gain: 0
    });
    this.filterRight = new _tone.default.Filter({
      frequency: 440,
      type: 'bandpass',
      rolloff: this.options.filterRolloff,
      Q: this.options.filterQ,
      gain: 0
    });
    this.meterLeft = new _tone.default.Meter();
    this.meterRight = new _tone.default.Meter();
    gainNode.connect(this.filterLeft);
    gainNode.connect(this.filterRight);
    this.filterLeft.connect(this.meterLeft);
    this.filterRight.connect(this.meterRight); // Choose some random parameters

    this.newRandomNote(); // LFO for controlling the synth gain

    const lfoFrequency = (0, _utils.randomRange)(this.options.minLFOFrequency, this.options.maxLFOFrequency);
    this.gainLFO = new _tone.default.LFO(lfoFrequency, this.options.minVolume, this.options.maxVolume);
    this.gainLFO.connect(this.synthGainNode.gain); // this.bandpassChordDetector = bandpassChordDetector(
    //   this.options.triggerChord,
    //   gainNode
    // )

    this.interval = null;
  }

  newRandomNote() {
    this.velocity = (0, _utils.randomRange)(this.options.minVelocity, this.options.maxVelocity);
    this.initialNote = (0, _utils.randomRange)(this.options.minInitialNote, this.options.maxInitialNote);
    this.currentNote = this.initialNote;
    this.currentVelocity = this.velocity; // Set the filter poles to initial positions

    this.setFilterPoles(this.initialNote);
  }

  start() {
    this.newRandomNote(); // The synthesizer play all the time, trigger its note

    this.synth.triggerAttack(this.converter.midiToFrequency(this.initialNote)); // Start the LFO

    this.gainLFO.start(); // Change screen color

    this.interval = setInterval(() => {
      const nextFrequency = this.converter.midiToFrequency(this.currentNote);
      this.visuals.setToColor([0, 0, 105 + Math.round(nextFrequency) % 150]);
    }, 1000);
  }

  stop() {
    this.synth.triggerRelease(); // Stop the LFO

    this.gainLFO.stop(); // Remove overlay

    this.visuals.resetColor();
    clearInterval(this.interval);
  }

  setFilterPoles(centerNote) {
    const {
      filterRange
    } = this.options;
    const left = this.converter.midiToFrequency(centerNote - filterRange);
    const right = this.converter.midiToFrequency(centerNote + filterRange);
    this.filterLeft.frequency.setValueAtTime(left, '+0');
    this.filterRight.frequency.setValueAtTime(right, '+0');
  }

  update() {
    // Generate random frequency when chord was detected
    // if (this.bandpassChordDetector()) {
    //   this.newRandomNote()
    //   this.visuals.flash()
    // }
    // Get meter and frequency values of our filter poles
    const leftMeterValue = this.meterLeft.getLevel();
    const rightMeterValue = this.meterRight.getLevel();
    const leftFilterFreq = this.filterLeft.frequency.value;
    const rightFilterFreq = this.filterRight.frequency.value; // Make all frequencies equally loud

    const weightedLeftMeterValue = (0, _aWeighting.a)(leftFilterFreq) * leftMeterValue;
    const weightedRightMeterValue = (0, _aWeighting.a)(rightFilterFreq) * rightMeterValue;

    if (!(isFinite(rightMeterValue) && isFinite(leftMeterValue))) {
      return;
    } // Velocity is depended on distance to the target frequency


    this.currentVelocity = Math.min(Math.max((rightMeterValue - leftMeterValue) * this.velocity, -this.options.velocityRange), this.options.velocityRange); // Update the frequencies

    this.currentNote += this.currentVelocity;
    this.setFilterPoles(this.currentNote); // Change the synth note

    const nextFrequency = this.converter.midiToFrequency(this.currentNote);
    this.synth.setNote(nextFrequency); // Debug output

    (0, _utils.debug)('=========');
    (0, _utils.debug)(leftMeterValue, rightMeterValue, this.currentVelocity);
    (0, _utils.debug)(nextFrequency);
  }

}

exports.default = FlockingAgent;